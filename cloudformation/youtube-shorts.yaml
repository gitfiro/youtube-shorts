AWSTemplateFormatVersion: '2010-09-09'
Description: Automated YouTube Shorts Converter Deployment

Parameters:
  GitHubRepo:
    Type: String
    Default: "https://github.com/yourusername/youtube-shorts-converter.git"
    Description: GitHub repository containing the source code

Resources:
  # ======================
  # 1. S3 Bucket for Media
  # ======================
  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub youtube-shorts-${AWS::AccountId}
      LifecycleConfiguration:
        Rules:
          - Id: DeleteTempFiles
            Status: Enabled
            ExpirationInDays: 1
            Prefix: tmp/

  # ======================
  # 2. ECR Repository for Docker Image
  # ======================
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: youtube-shorts-converter
      ImageTagMutability: IMMUTABLE

  # ======================
  # 3. CodeBuild Project (Builds Docker Image)
  # ======================
  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: youtube-shorts-docker-build
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: GITHUB
        Location: !Ref GitHubRepo
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: ECR_REPO
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/youtube-shorts-converter
      Artifacts:
        Type: NO_ARTIFACTS
      TimeoutInMinutes: 10

  # ======================
  # 4. ECS Fargate Service (Runs the App)
  # ======================
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: youtube-shorts-cluster

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: youtube-shorts-task
      NetworkMode: awsvpc
      Cpu: 2048
      Memory: 4096
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: youtube-shorts-app
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/youtube-shorts-converter:latest
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: S3_BUCKET
              Value: !Ref MediaBucket

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: DockerBuildProject
    Properties:
      ServiceName: youtube-shorts-service
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref PublicSubnets
          SecurityGroups:
            - !Ref ECSSecurityGroup

  # ======================
  # 5. Load Balancer (Public Access)
  # ======================
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: youtube-shorts-lb
      Scheme: internet-facing
      Subnets: !Ref PublicSubnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: youtube-shorts-tg
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /

  # ======================
  # 6. Security Groups & IAM Roles
  # ======================
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow public HTTP
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [codebuild.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                Resource: "*"

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub ${MediaBucket.Arn}/*

Outputs:
  LoadBalancerDNS:
    Description: "URL to access the YouTube Shorts Converter"
    Value: !Sub "http://${LoadBalancer.DNSName}"